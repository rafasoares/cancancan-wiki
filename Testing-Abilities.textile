It can be difficult to thoroughly test user permissions at the functional/integration level because there are often many branching possibilities. Since CanCan handles all permission logic in a single @Ability@ class this makes it easy to have a solid set of unit test for complete coverage.

The @can?@ method can be called directly on any @Ability@ (like you would in the controller or view) so it is easy to test permission logic.

<pre>
test "user can only destroy projects which he owns" do
  user = User.create!
  ability = Ability.new(user)
  assert ability.can?(:destroy, Project.new(:user => user))
  assert ability.cannot?(:destroy, Project.new)
end
</pre>


h2. RSpec

If you are testing the @Ability@ class through RSpec there is a @be_able_to@ matcher available. This checks if the @can?@ method returns @true@.

<pre>
require "cancan/matchers"
# ...
ability.should be_able_to(:destroy, Project.new(:user => user))
ability.should_not be_able_to(:destroy, Project.new)
</pre>


h2. Cucumber

If you have difficulty testing CanCan through Cucumber, see "this issue":http://github.com/ryanb/cancan/issues#issue/35. This wiki documentation should be filled out more to contain a complete solution.