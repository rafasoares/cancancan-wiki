CanCan is decoupled from how you implement roles in the User model, but how might one set up basic role-based authorization?

One method is to create a separate Role model and set up either a one-to-many or many-to-many association between User depending on if you want the user to have many roles. Here let's do a many-to-many association and call the join model Assignment.

<pre>
class User < ActiveRecord::Base
  has_many :assignments
  has_many :roles, :through => :assignments
end

class Assignment < ActiveRecord::Base
  belongs_to :user
  belongs_to :role
end

class Role < ActiveRecord::Base
  has_many :assignments
  has_many :users, :through => :assignments
end
</pre>

You can assign roles using checkboxes when creating or updating a user model.

<pre>
<% for role in Role.all %>
<div>
  <%= check_box_tag "user[role_ids][]", role.id, @user.roles.include?(role) %>
  <%=h role.name %>
</div>
<% end %>
</pre>

Or you may want to "use Formtastic":http://railscasts.com/episodes/185-formtastic-part-2 for this.

Next you need to determine if a user is in a specific role. You can create a method in the User model for this.

<pre>
# in models/user.rb
def has_role?(role_sym)
  roles.any? { |r| r.name.underscore.to_sym == role_sym }
end
</pre>

And then you can use this in your Ability.

<pre>
# in models/ability.rb
def initialize(user)
  user ||= User.new # in case of guest
  if user.has_role? :admin
    can :manage, :all
  else
    can :read, :all
  end
end
</pre>

That's it!